{"version":3,"sources":["components/List.js","components/Details.js","App.js","serviceWorker.js","reducers/listReducer.js","reducers/detailReducer.js","reducers/index.js","index.js"],"names":["List","handleClick","id","props","history","push","fetch","then","response","json","myJson","handleList","class","cellspacing","this","list","map","d","i","key","className","onClick","name","status","React","Component","withRouter","connect","state","list_data","dispatch","type","data","Detail","match","params","target","detail","detail_data","App","exact","path","Boolean","window","location","hostname","listReducer","action","detailReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2b48f98.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\n\nconst mapStateToProps = state => ({\n    list:state.list_data,\n  })\n  const mapDispatchToProps = dispatch => ({\n    handleList:(myJson) =>{\n        dispatch({ type: 'List', data:myJson })\n    }\n  })\n\n\n\n\nclass List extends React.Component {\n\ncomponentDidMount(){\n    fetch('http://localhost:8000/api/')\n    .then((response) => {\n      return response.json();\n    })\n    .then((myJson) => {\n        this.props.handleList(myJson)\n    })\n}\n\nhandleClick=(id)=>{\n    this.props.history.push('/detail/'+id)\n}\n render() {\n      return ( \n      <div>\n\n<div class=\"table-users\">\n   <div class=\"header\">Users</div>\n   \n   <table cellspacing=\"0\">\n\n      {this.props.list.map((d,i)=>{\n      return(\n        <tr key={i}>\n        <th className='id' onClick={()=>{\n            this.handleClick(d.id)\n        }}>{d.id}</th>\n        <th>{d.name}</th>\n        <th>{d.status}</th>\n      </tr>\n      )\n    })}\n     \n   </table>\n</div>\n      </div>\n      )\n    }\n  }\n\n  export default withRouter(connect(mapStateToProps,mapDispatchToProps)(List));","import React from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n    detail:state.detail_data,\n  })\n  const mapDispatchToProps = dispatch => ({\n    handleList:(myJson) =>{\n        dispatch({ type: 'Detail', data:myJson })\n    }\n  })\nclass Detail extends React.Component {\n\n    componentDidMount(){\n        fetch('http://localhost:8000/api/'+this.props.match.params.id)\n    .then((response) => {\n      return response.json();\n    })\n    .then((myJson) => {\n        this.props.handleList(myJson)\n    })\n    }\n    render() {\n      return (<div className='body'>\n          <div class=\"shadow\">\n  <div class=\"card\">\n    <div class=\"card-header\">Hover me</div>\n    <div class=\"card-body\">\n      <dl>\n        <span>\n          <dt><a target=\"_blank\"></a></dt>\n          <dd>{this.props.detail['name']}</dd>\n        </span>\n        <span>\n          <dt><a></a></dt>\n          <dd>{this.props.detail['value']}</dd>\n        </span>\n        <span>\n          <dt><a></a></dt>\n          <dd>{this.props.detail['config']}</dd>\n        </span>\n        <span>\n          <dt><a></a></dt>\n          <dd>{this.props.detail['detail']}</dd>\n        </span>\n      </dl>\n    </div>\n  </div>\n</div>\n\n      </div>)\n    }\n  }\n\n  export default withRouter(connect(mapStateToProps,mapDispatchToProps)(Detail));","import React from 'react';\nimport './App.css';\nimport List from \"./components/List\";\nimport Detail from \"./components/Details\";\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { BrowserRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n     <Switch>\n          <Route exact path=\"/\">\n            <List/>\n          </Route>\n          <Route path=\"/detail/:id\">\n            <Detail/>\n          </Route>\n      </Switch>\n    </BrowserRouter>\n      </div>\n    );\n  }\n}\nexport default connect()(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nfunction listReducer(state = [], action) {\n    switch (action.type) {\n      case 'List':\n          return action.data['data'];\n        break;\n      default: return state;\n    }\n\n    }\nexport default listReducer;","\n\nfunction detailReducer(state = {\n    \"id\":'',\n    \"name\":'',\n    \"value\":'',\n    \"config\":'',\n    \"status\":'',\n    \"Desc\":''\n    }, action) {\n    switch (action.type) {\n      case 'Detail':\n            return action.data;\n        break;\n\n      default: return state;\n    }\n\n    }\nexport default detailReducer;","import { combineReducers } from 'redux';\nimport listReducer from './listReducer';\nimport detailReducer from './detailReducer';\nconst rootReducer = combineReducers({\n  list_data:listReducer,\n  detail_data:detailReducer\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './reducers';\nconst store = createStore(rootReducer,composeWithDevTools())\nReactDOM.render(\n    <Provider store={store}><App /></Provider>\n, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}